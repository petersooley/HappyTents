/*
	 *
	 * Complete search algorithm (no heuristics):
	 * 
	 * Fill tent[tIndex] with camper[cIndex]
	 * 		if tent[tIndex].isfull()
	 * 			if tIndex == maxTents
	 * 				happiness = getHappiness()
	 * 				if happiness > maxHappiness
	 * 					saveSolution()
	 * 					maxHappiness = happiness
	 * 			else
	 * 				++tIndex
	 * 		else
	 * 			return Fill tent[tIndex] with camper[++cIndex]
	 * 
	 * Assumptions:
	 * 1. total tent capacity = total campers
	 */
	/*
	public int search(int curHappiness, int maxHappiness, int tIndex, int cIndex) {
		Tent t = tents.get(tIndex);
		Camper c = campers.get(cIndex);
		t.addCamper(c);
		
		if(t.atCapacity()) {
			
			curHappiness =+ t.happiness();
			
			// at a leaf?
			if (tIndex == maxTents) {
		
				// have we beat the best solution so far?
				if(curHappiness > maxHappiness) {
					return curHappiness;
				}
				// our current solution sucks, backtrack for something better
				else {
					t.removeCamper(c);
					
					if (cIndex == maxCampers) {
						
					}
					else {
						
					}
					//return search();
					//...
				}
			}
			else {
				++tIndex;
			}
		}
		return search(curHappiness, maxHappiness, tIndex, ++cIndex);
	}*/
	
	/*
	public int search(ArrayList<Tent> tents, ArrayList<Camper> campers, int maxHappiness) {
		Tent t = (Tent) pop(tents);
		ArrayList<Camper> popped = new ArrayList<Camper>();
		while(!t.atCapacity()) {
			Camper c = (Camper) pop(campers);
			popped.add(c);
			t.addCamper(c);
		}
		
		return search(tents, campers, maxHappiness);
	}*/
	
##############################################################################################

	private int search(Tent tent, ArrayList<Tent> tents, ArrayList<Camper> campers, int curHappiness) {
		System.out.print(".");
		System.out.flush();
		int maxHappiness = 0;
		out("tents size: "+tents.size());
		if(tent.atCapacity()) {
			out("tent full");
			if(tents.size() == 0) 
				return curHappiness;					
			else
				tent = (Tent) pop(tents);
		}
		int size = campers.size();
		out("campers size: "+size);
		for(int i = 0; i < size; ++i) {
			out("i: "+i);
			Camper c = (Camper) pop(campers, i);
			ArrayList<Camper> remaining = new ArrayList<Camper>();
			copy(remaining, campers);
			out("adding camper...");
			tent.addCamper(c);
			curHappiness =+ tent.happiness();
			out("searching...");
			int happiness = search(tent, tents, remaining, curHappiness);
			maxHappiness = happiness > maxHappiness ? happiness : maxHappiness;
			
		}
		
		return maxHappiness;
	}

###################################################################################################################

	private int search(ArrayList<TentSeat> seats, ArrayList<Camper> campers, int curHappiness) {
		System.out.print(".");
		System.out.flush();
		
	
		if(seats.size() <= 0){
			out("hit bottom");
			return 1;
		}
		TentSeat seat = (TentSeat) pop(seats);
		seat.print();
		ArrayList<TentSeat> seatsLeft = new ArrayList<TentSeat>();
		copyTentSeats(seatsLeft, seats);
		
		return search(seatsLeft, campers, curHappiness);
	}